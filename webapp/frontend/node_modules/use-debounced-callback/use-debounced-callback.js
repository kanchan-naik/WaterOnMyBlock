// Vendor
import { useCallback, useEffect, useRef } from "react";
/**
 * Debounce the `callback` execution until the difference between the current time
 * and the last execution time of the callback is lower than the `millisecondsOffset`.
 *
 * @param callback The callback to debounce
 * @param millisecondsOffset The milliseconds of debounce
 * @returns The ref to the debounced callback
 */
function useDebouncedCallback(callback, millisecondsOffset) {
    var callbackAlreadyCalled = useRef(false);
    var timeoutId = useRef(0);
    var memoizedCallback = useCallback(function (e) {
        callbackAlreadyCalled.current = true;
        callback(e);
    }, []);
    var debouncedCallback = useCallback(function (e) {
        if (callbackAlreadyCalled.current) {
            clearTimeout(timeoutId.current);
        }
        else {
            memoizedCallback(e);
        }
        timeoutId.current = window.setTimeout(function () {
            callbackAlreadyCalled.current = false;
        }, millisecondsOffset);
    }, [millisecondsOffset]);
    useEffect(function () {
        return function () {
            clearTimeout(timeoutId.current);
        };
    }, [millisecondsOffset]);
    return debouncedCallback;
}
export default useDebouncedCallback;
